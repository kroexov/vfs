// Code generated by zenrpc; DO NOT EDIT.

package vfs

import (
	"context"
	"encoding/json"

	"github.com/semrush/zenrpc"
	"github.com/semrush/zenrpc/smd"
)

var RPC = struct {
	Service struct{ GetFolder, GetFolderBranch, GetFiles, CountFiles, MoveFiles, DeleteFiles, SetFilePhysicalName, SearchFolderByFileId, SearchFolderByFile, GetFavorites, ManageFavorites, CreateFolder, DeleteFolder, MoveFolder, RenameFolder, HelpUpload string }
}{
	Service: struct{ GetFolder, GetFolderBranch, GetFiles, CountFiles, MoveFiles, DeleteFiles, SetFilePhysicalName, SearchFolderByFileId, SearchFolderByFile, GetFavorites, ManageFavorites, CreateFolder, DeleteFolder, MoveFolder, RenameFolder, HelpUpload string }{
		GetFolder:            "getfolder",
		GetFolderBranch:      "getfolderbranch",
		GetFiles:             "getfiles",
		CountFiles:           "countfiles",
		MoveFiles:            "movefiles",
		DeleteFiles:          "deletefiles",
		SetFilePhysicalName:  "setfilephysicalname",
		SearchFolderByFileId: "searchfolderbyfileid",
		SearchFolderByFile:   "searchfolderbyfile",
		GetFavorites:         "getfavorites",
		ManageFavorites:      "managefavorites",
		CreateFolder:         "createfolder",
		DeleteFolder:         "deletefolder",
		MoveFolder:           "movefolder",
		RenameFolder:         "renamefolder",
		HelpUpload:           "helpupload",
	},
}

func (Service) SMD() smd.ServiceInfo {
	return smd.ServiceInfo{
		Description: ``,
		Methods: map[string]smd.Service{
			"GetFolder": {
				Description: `Get Folder with Sub Folders.`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "rootFolderId",
						Optional:    true,
						Description: ``,
						Type:        smd.Integer,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    true,
					Type:        smd.Object,
					Properties: map[string]smd.Property{
						"id": {
							Description: ``,
							Type:        smd.Integer,
						},
						"name": {
							Description: ``,
							Type:        smd.String,
						},
						"parentId": {
							Description: ``,
							Type:        smd.Integer,
						},
					},
				},
				Errors: map[int]string{
					404: "Folder not found",
				},
			},
			"GetFolderBranch": {
				Description: `Get Folder Branch`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "folderId",
						Optional:    false,
						Description: ``,
						Type:        smd.Integer,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    false,
					Type:        smd.Array,
					Items: map[string]string{
						"$ref": "#/definitions/Folder",
					},
					Definitions: map[string]smd.Definition{
						"Folder": {
							Type: "object",
							Properties: map[string]smd.Property{
								"id": {
									Description: ``,
									Type:        smd.Integer,
								},
								"name": {
									Description: ``,
									Type:        smd.String,
								},
								"parentId": {
									Description: ``,
									Type:        smd.Integer,
								},
							},
						},
					},
				},
			},
			"GetFiles": {
				Description: `Get Files`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "folderId",
						Optional:    false,
						Description: `root folder id`,
						Type:        smd.Integer,
					},
					{
						Name:        "query",
						Optional:    true,
						Description: `file name`,
						Type:        smd.String,
					},
					{
						Name:        "sortField",
						Optional:    true,
						Description: `createdAt, title or fileSize`,
						Type:        smd.String,
					},
					{
						Name:        "isDescending",
						Optional:    true,
						Description: `asc = false, desc = true`,
						Type:        smd.Boolean,
					},
					{
						Name:        "page",
						Optional:    true,
						Description: `current page`,
						Type:        smd.Integer,
					},
					{
						Name:        "pageSize",
						Optional:    true,
						Description: `current pageSize`,
						Type:        smd.Integer,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    false,
					Type:        smd.Array,
					Items: map[string]string{
						"$ref": "#/definitions/File",
					},
					Definitions: map[string]smd.Definition{
						"File": {
							Type: "object",
							Properties: map[string]smd.Property{
								"id": {
									Description: `$file->fileId,`,
									Type:        smd.Integer,
								},
								"name": {
									Description: `$file->title,`,
									Type:        smd.String,
								},
								"path": {
									Description: `Site::GetWebPath( VfsUtility::RootDir ) . $file->path,`,
									Type:        smd.String,
								},
								"relpath": {
									Description: `basename( $file->path, '.' . array_pop( $filePaths ) ),`,
									Type:        smd.String,
								},
								"size": {
									Description: `$file->fileSize,`,
									Type:        smd.Integer,
								},
								"sizeH": {
									Description: `self::HumanSize( $file->fileSize, 2 ),`,
									Type:        smd.Array,
									Items: map[string]string{
										"type": smd.String,
									},
								},
								"date": {
									Description: `$file->createdAt->DefaultFormat(),`,
									Type:        smd.String,
								},
								"type": {
									Description: `mb_strimwidth( $file->mimeType, 0, 32, '...' ),`,
									Type:        smd.String,
								},
								"extension": {
									Description: `DirectoryInfo::GetExtension( $file->path ),`,
									Type:        smd.String,
								},
								"params": {
									Description: `$file->params,`,
									Ref:         "#/definitions/FileParams",
									Type:        smd.Object,
								},
								"shortpath": {
									Description: `$file->path,`,
									Type:        smd.String,
								},
								"width": {
									Description: `ArrayHelper::GetValue( $file->params, 'width', null ),`,
									Type:        smd.Integer,
								},
								"height": {
									Description: `ArrayHelper::GetValue( $file->params, 'height', null ),`,
									Type:        smd.Integer,
								},
							},
						},
						"FileParams": {
							Type: "object",
							Properties: map[string]smd.Property{
								"width": {
									Description: ``,
									Type:        smd.Integer,
								},
								"height": {
									Description: ``,
									Type:        smd.Integer,
								},
							},
						},
					},
				},
			},
			"CountFiles": {
				Description: `Count Files`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "folderId",
						Optional:    false,
						Description: `root folder id`,
						Type:        smd.Integer,
					},
					{
						Name:        "query",
						Optional:    true,
						Description: `file name`,
						Type:        smd.String,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    false,
					Type:        smd.Integer,
				},
			},
			"MoveFiles": {
				Description: `Move Files`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "fileIds",
						Optional:    false,
						Description: ``,
						Type:        smd.Array,
						Items: map[string]string{
							"type": smd.Integer,
						},
					},
					{
						Name:        "destinationFolderId",
						Optional:    false,
						Description: ``,
						Type:        smd.Integer,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    false,
					Type:        smd.Boolean,
				},
			},
			"DeleteFiles": {
				Description: `Delete Files`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "fileIds",
						Optional:    false,
						Description: ``,
						Type:        smd.Array,
						Items: map[string]string{
							"type": smd.Integer,
						},
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    false,
					Type:        smd.Boolean,
				},
			},
			"SetFilePhysicalName": {
				Description: `Rename File on Server`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "fileIds",
						Optional:    false,
						Description: ``,
						Type:        smd.Array,
						Items: map[string]string{
							"type": smd.Integer,
						},
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    false,
					Type:        smd.Boolean,
				},
			},
			"SearchFolderByFileId": {
				Description: `Search Folder by File Id`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "fileId",
						Optional:    false,
						Description: ``,
						Type:        smd.Integer,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    true,
					Type:        smd.Object,
					Properties: map[string]smd.Property{
						"id": {
							Description: `$file->fileId,`,
							Type:        smd.Integer,
						},
						"name": {
							Description: `$file->title,`,
							Type:        smd.String,
						},
						"path": {
							Description: `Site::GetWebPath( VfsUtility::RootDir ) . $file->path,`,
							Type:        smd.String,
						},
						"relpath": {
							Description: `basename( $file->path, '.' . array_pop( $filePaths ) ),`,
							Type:        smd.String,
						},
						"size": {
							Description: `$file->fileSize,`,
							Type:        smd.Integer,
						},
						"sizeH": {
							Description: `self::HumanSize( $file->fileSize, 2 ),`,
							Type:        smd.Array,
							Items: map[string]string{
								"type": smd.String,
							},
						},
						"date": {
							Description: `$file->createdAt->DefaultFormat(),`,
							Type:        smd.String,
						},
						"type": {
							Description: `mb_strimwidth( $file->mimeType, 0, 32, '...' ),`,
							Type:        smd.String,
						},
						"extension": {
							Description: `DirectoryInfo::GetExtension( $file->path ),`,
							Type:        smd.String,
						},
						"params": {
							Description: `$file->params,`,
							Ref:         "#/definitions/FileParams",
							Type:        smd.Object,
						},
						"shortpath": {
							Description: `$file->path,`,
							Type:        smd.String,
						},
						"width": {
							Description: `ArrayHelper::GetValue( $file->params, 'width', null ),`,
							Type:        smd.Integer,
						},
						"height": {
							Description: `ArrayHelper::GetValue( $file->params, 'height', null ),`,
							Type:        smd.Integer,
						},
					},
					Definitions: map[string]smd.Definition{
						"FileParams": {
							Type: "object",
							Properties: map[string]smd.Property{
								"width": {
									Description: ``,
									Type:        smd.Integer,
								},
								"height": {
									Description: ``,
									Type:        smd.Integer,
								},
							},
						},
					},
				},
			},
			"SearchFolderByFile": {
				Description: `Search Folder by Filename`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "filename",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    true,
					Type:        smd.Object,
					Properties: map[string]smd.Property{
						"id": {
							Description: `$file->fileId,`,
							Type:        smd.Integer,
						},
						"name": {
							Description: `$file->title,`,
							Type:        smd.String,
						},
						"path": {
							Description: `Site::GetWebPath( VfsUtility::RootDir ) . $file->path,`,
							Type:        smd.String,
						},
						"relpath": {
							Description: `basename( $file->path, '.' . array_pop( $filePaths ) ),`,
							Type:        smd.String,
						},
						"size": {
							Description: `$file->fileSize,`,
							Type:        smd.Integer,
						},
						"sizeH": {
							Description: `self::HumanSize( $file->fileSize, 2 ),`,
							Type:        smd.Array,
							Items: map[string]string{
								"type": smd.String,
							},
						},
						"date": {
							Description: `$file->createdAt->DefaultFormat(),`,
							Type:        smd.String,
						},
						"type": {
							Description: `mb_strimwidth( $file->mimeType, 0, 32, '...' ),`,
							Type:        smd.String,
						},
						"extension": {
							Description: `DirectoryInfo::GetExtension( $file->path ),`,
							Type:        smd.String,
						},
						"params": {
							Description: `$file->params,`,
							Ref:         "#/definitions/FileParams",
							Type:        smd.Object,
						},
						"shortpath": {
							Description: `$file->path,`,
							Type:        smd.String,
						},
						"width": {
							Description: `ArrayHelper::GetValue( $file->params, 'width', null ),`,
							Type:        smd.Integer,
						},
						"height": {
							Description: `ArrayHelper::GetValue( $file->params, 'height', null ),`,
							Type:        smd.Integer,
						},
					},
					Definitions: map[string]smd.Definition{
						"FileParams": {
							Type: "object",
							Properties: map[string]smd.Property{
								"width": {
									Description: ``,
									Type:        smd.Integer,
								},
								"height": {
									Description: ``,
									Type:        smd.Integer,
								},
							},
						},
					},
				},
			},
			"GetFavorites": {
				Description: `Get Favorites`,
				Parameters:  []smd.JSONSchema{},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    false,
					Type:        smd.Array,
					Items: map[string]string{
						"$ref": "#/definitions/Folder",
					},
					Definitions: map[string]smd.Definition{
						"Folder": {
							Type: "object",
							Properties: map[string]smd.Property{
								"id": {
									Description: ``,
									Type:        smd.Integer,
								},
								"name": {
									Description: ``,
									Type:        smd.String,
								},
								"parentId": {
									Description: ``,
									Type:        smd.Integer,
								},
							},
						},
					},
				},
			},
			"ManageFavorites": {
				Description: `Manage Favorite Folders`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "folderId",
						Optional:    false,
						Description: ``,
						Type:        smd.Integer,
					},
					{
						Name:        "isInFavorites",
						Optional:    false,
						Description: ``,
						Type:        smd.Boolean,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    false,
					Type:        smd.Boolean,
				},
			},
			"CreateFolder": {
				Description: `Create Folder`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "rootFolderId",
						Optional:    false,
						Description: ``,
						Type:        smd.Integer,
					},
					{
						Name:        "name",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    false,
					Type:        smd.Boolean,
				},
			},
			"DeleteFolder": {
				Description: `Delete Folder`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "folderId",
						Optional:    false,
						Description: ``,
						Type:        smd.Integer,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    false,
					Type:        smd.Boolean,
				},
			},
			"MoveFolder": {
				Description: `Move Folder`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "folderId",
						Optional:    false,
						Description: ``,
						Type:        smd.Integer,
					},
					{
						Name:        "destinationFolderId",
						Optional:    false,
						Description: ``,
						Type:        smd.Integer,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    false,
					Type:        smd.Boolean,
				},
			},
			"RenameFolder": {
				Description: `Move Folder`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "folderId",
						Optional:    false,
						Description: ``,
						Type:        smd.Integer,
					},
					{
						Name:        "name",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    false,
					Type:        smd.Boolean,
				},
			},
			"HelpUpload": {
				Description: ``,
				Parameters:  []smd.JSONSchema{},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    false,
					Type:        smd.Object,
					Properties: map[string]smd.Property{
						"temp": {
							Description: ``,
							Ref:         "#/definitions/HelpUploadItem",
							Type:        smd.Object,
						},
						"queue": {
							Description: ``,
							Ref:         "#/definitions/HelpUploadItem",
							Type:        smd.Object,
						},
					},
					Definitions: map[string]smd.Definition{
						"HelpUploadItem": {
							Type: "object",
							Properties: map[string]smd.Property{
								"url": {
									Description: ``,
									Type:        smd.String,
								},
								"params": {
									Description: ``,
									Type:        smd.Array,
									Items: map[string]string{
										"type": smd.String,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

// Invoke is as generated code from zenrpc cmd
func (s Service) Invoke(ctx context.Context, method string, params json.RawMessage) zenrpc.Response {
	resp := zenrpc.Response{}
	var err error

	switch method {
	case RPC.Service.GetFolder:
		var args = struct {
			RootFolderId *int `json:"rootFolderId"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"rootFolderId"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		//zenrpc:rootFolderId=1
		if args.RootFolderId == nil {
			var v int = 1
			args.RootFolderId = &v
		}

		resp.Set(s.GetFolder(ctx, *args.RootFolderId))

	case RPC.Service.GetFolderBranch:
		var args = struct {
			FolderId int `json:"folderId"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"folderId"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.GetFolderBranch(ctx, args.FolderId))

	case RPC.Service.GetFiles:
		var args = struct {
			FolderId     int     `json:"folderId"`
			Query        *string `json:"query"`
			SortField    *string `json:"sortField"`
			IsDescending *bool   `json:"isDescending"`
			Page         *int    `json:"page"`
			PageSize     *int    `json:"pageSize"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"folderId", "query", "sortField", "isDescending", "page", "pageSize"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		//zenrpc:isDescending=true asc = false, desc = true
		if args.IsDescending == nil {
			var v bool = true
			args.IsDescending = &v
		}

		//zenrpc:page=0 current page
		if args.Page == nil {
			var v int = 0
			args.Page = &v
		}

		//zenrpc:pageSize=100 current pageSize
		if args.PageSize == nil {
			var v int = 100
			args.PageSize = &v
		}

		//zenrpc:sortField="createdAt" createdAt, title or fileSize
		if args.SortField == nil {
			var v string = "createdAt"
			args.SortField = &v
		}

		resp.Set(s.GetFiles(ctx, args.FolderId, args.Query, *args.SortField, *args.IsDescending, *args.Page, *args.PageSize))

	case RPC.Service.CountFiles:
		var args = struct {
			FolderId int     `json:"folderId"`
			Query    *string `json:"query"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"folderId", "query"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.CountFiles(ctx, args.FolderId, args.Query))

	case RPC.Service.MoveFiles:
		var args = struct {
			FileIds             []int `json:"fileIds"`
			DestinationFolderId int   `json:"destinationFolderId"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"fileIds", "destinationFolderId"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.MoveFiles(ctx, args.FileIds, args.DestinationFolderId))

	case RPC.Service.DeleteFiles:
		var args = struct {
			FileIds []int `json:"fileIds"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"fileIds"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.DeleteFiles(ctx, args.FileIds))

	case RPC.Service.SetFilePhysicalName:
		var args = struct {
			FileIds []int `json:"fileIds"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"fileIds"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.SetFilePhysicalName(ctx, args.FileIds))

	case RPC.Service.SearchFolderByFileId:
		var args = struct {
			FileId int `json:"fileId"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"fileId"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.SearchFolderByFileId(ctx, args.FileId))

	case RPC.Service.SearchFolderByFile:
		var args = struct {
			Filename string `json:"filename"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"filename"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.SearchFolderByFile(ctx, args.Filename))

	case RPC.Service.GetFavorites:
		resp.Set(s.GetFavorites(ctx))

	case RPC.Service.ManageFavorites:
		var args = struct {
			FolderId      int  `json:"folderId"`
			IsInFavorites bool `json:"isInFavorites"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"folderId", "isInFavorites"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.ManageFavorites(ctx, args.FolderId, args.IsInFavorites))

	case RPC.Service.CreateFolder:
		var args = struct {
			RootFolderId int    `json:"rootFolderId"`
			Name         string `json:"name"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"rootFolderId", "name"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.CreateFolder(ctx, args.RootFolderId, args.Name))

	case RPC.Service.DeleteFolder:
		var args = struct {
			FolderId int `json:"folderId"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"folderId"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.DeleteFolder(ctx, args.FolderId))

	case RPC.Service.MoveFolder:
		var args = struct {
			FolderId            int `json:"folderId"`
			DestinationFolderId int `json:"destinationFolderId"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"folderId", "destinationFolderId"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.MoveFolder(ctx, args.FolderId, args.DestinationFolderId))

	case RPC.Service.RenameFolder:
		var args = struct {
			FolderId int    `json:"folderId"`
			Name     string `json:"name"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"folderId", "name"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.RenameFolder(ctx, args.FolderId, args.Name))

	case RPC.Service.HelpUpload:
		resp.Set(s.HelpUpload())

	default:
		resp = zenrpc.NewResponseError(nil, zenrpc.MethodNotFound, "", nil)
	}

	return resp
}
